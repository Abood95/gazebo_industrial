#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################
 
import rospy
import numpy as np
import math
import tf
from std_msgs.msg import Int8
from geometry_msgs.msg import PoseStamped, Pose
from move_base_msgs.msg import MoveBaseActionResult
import numpy as np
import time

class MoveRegion():
    def __init__(self):
        self.sub_tunnel_order = rospy.Subscriber('/move_region/goal_pos', Pose , self.cbPose2PoseStamped, queue_size=1)
        self.sub_tunnel_order = rospy.Subscriber('/move_region/goal_region', Int8 , self.cbPoseRegion, queue_size=1)
        self.sub_arrival_status = rospy.Subscriber("/move_base/result", MoveBaseActionResult, self.cbGetNavigationResult, queue_size=1)
        self.pub_goal_pose_stamped = rospy.Publisher("/move_base_simple/goal", PoseStamped, queue_size=1)
        #x,y,z
        self.region = np.array( [[0,0,0] , [1.3,0.7,0.0],[1.0,0.7,0.0],[-1.0,0.7,1.0],[-1.3,0.7,1.0],   \
					   [1.3,-0.7,0.0],[1.0,-0.7,0.0],[-1.0,-0.7,1.0],[-1.3,-0.7,1.0]]) 
	self.goal_reach = False
	self.room_scan_state = False
	rospy.loginfo("set main")

    def cbPoseRegion(self, msg_goal_region):
        goal_region = msg_goal_region.data
        if goal_region >= 0 and goal_region <= 8 :             
	    self.goRegion(goal_region)	    
	elif goal_region == 13 and self.room_scan_state == False : 	    
            rospy.loginfo("room scan start")
            self.startRoomScan()
        else : 
            rospy.loginfo("no support set")

    def cbPose2PoseStamped(self, goal_pos):
        self.fnPubGoalPose(goal_pos)
    
    def cbGetNavigationResult(self, msg_nav_result):
        if msg_nav_result.status.status == 3:
            rospy.loginfo("Reached")
	    self.goal_reach = True

    def startRoomScan(self):
        self.goal_reach = False
	self.room_scan_state = True

        self.goRegion(1)
        while True:
	    if self.goal_reach == True :
		break
            time.sleep(0.5)

        self.goRegion(4)
        while True:
	    if self.goal_reach == True :
		break
            time.sleep(0.5)

        self.goRegion(0)
        while True:
	    if self.goal_reach == True :
		break
            time.sleep(0.5)

        self.goRegion(5) 
        while True:
	    if self.goal_reach == True :
		break
            time.sleep(0.5)

        self.goRegion(8) 
        while True:
	    if self.goal_reach == True :
		break
            time.sleep(0.5)    
	self.room_scan_state = False

    def goRegion(self, goal_region):
        rospy.loginfo("go region" + str(goal_region)) 
	self.goal_reach = False
        goal_pos = Pose()
	goal_pos.position.x = self.region[goal_region][0]
        goal_pos.position.y = self.region[goal_region][1]
        goal_pos.position.z = 0.0 
        goal_pos.orientation.x = 0.0
        goal_pos.orientation.y = 0.0
        goal_pos.orientation.z = self.region[goal_region][2]
	goal_pos.orientation.w = 0.1
	self.fnPubGoalPose(goal_pos)      

    def fnPubGoalPose(self, goal_pos):
        goalPoseStamped = PoseStamped()
        goalPoseStamped.header.frame_id = "map"
        goalPoseStamped.header.stamp = rospy.Time.now()
        goalPoseStamped.pose = goal_pos
        self.pub_goal_pose_stamped.publish(goalPoseStamped)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('move_region')
    node = MoveRegion()
    node.main()
